# https://circleci.com/docs/2.0/language-ruby/

version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.1.1

# Global variables
parameters:
  bundle_jobs:
    type: integer
    default: 3
  bundle_path:
    type: string
    default: vendor/bundle
  bundle_retry:
    type: integer
    default: 2
  ruby_version:
    type: string
    default: '2.7.1'

commands:
  run_ruby_tests:
    steps:
      - run:
          command: bundle exec rake test
  install_ruby_gems:
    description: 'Install Ruby Gems using cache'
    parameters:
      bundler_version:
        description: 'Configure which version of bundler to install and utilize'
        default: '2.1.4'
        type: string
    steps:
      - restore_cache:
          name: Restore Ruby Gems Cache
          keys:
            - ruby-gems-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Gems
          command: |
            if ! echo $(bundle version) | grep -q <<parameters.bundler_version>>; then
              echo "Installing bundler <<parameters.bundler_version>>"
              gem install bundler:<<parameters.bundler_version>>
            else
              echo "bundler <<parameters.bundler_version>> is already installed."
            fi
            bundle install
      - save_cache:
          name: Cache Ruby Gems
          paths:
            - << pipeline.parameters.bundle_path >>
          key: ruby-gems-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}

# Re-usable defaults
default_environment: &default_environment
  environment:
    BUNDLE_JOBS: <<pipeline.parameters.bundle_jobs>>
    BUNDLE_PATH: <<pipeline.parameters.bundle_path>>
    BUNDLE_RETRY: <<pipeline.parameters.bundle_retry>>
    RAILS_ENV: test

jobs:
  build: # our first job, named "build"
    docker:
      - image: cimg/ruby:<<pipeline.parameters.ruby_version>>
    <<: *default_environment
    steps:
      - checkout # pull down our git code.
      - install_ruby_gems

  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 3
    docker:
      - image: cimg/ruby:<<pipeline.parameters.ruby_version>>
    <<: *default_environment
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - install_ruby_gems
      - run_ruby_tests

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
